world : type.
ze : world.
su : world -> world.

verif : tm -> prop -> type.
%mode verif +M +P.

% forcing is verification at a world
force : world -> tm -> prop -> type.
%mode force -W +M +P.

% justification is local truth
justif : tm -> prop -> type.
%mode justif +M +P.

justif/force
   : justif M P
      <- force W M P.

force/verif
   : force ze M P
      <- verif M P.

force/step
   : force (su W) M P
      <- step? M M'
      <- force W M' P.

verif/unit
   : verif tt unit.
verif/and
   : verif (pair M N) (and P Q)
      <- justif M P
      <- justif N Q.
verif/or/1
   : verif (inl M) (or P Q)
      <- verif M P.
verif/or/2
   : verif (inr M) (or P Q)
      <- verif M Q.
verif/imp
   : verif (lam E) (imp P Q)
      <- ({x} verif x P -> justif (E x) Q).

% every verification is a canonical form
verif-halt : verif M P -> halt M -> type.
%mode verif-halt +V -H.
- : verif-halt verif/unit halt/tt.
- : verif-halt (verif/and X Y) halt/pair.
- : verif-halt (verif/or/1 X) (halt/inl H)
     <- verif-halt X H.
- : verif-halt (verif/or/2 X) (halt/inr H)
     <- verif-halt X H.
-: verif-halt (verif/imp _) halt/lam.
%worlds () (verif-halt _ _).
%total V (verif-halt V _).

% the monotonicity of forcing
force-mono : force W M P -> force (su W) M P -> type.
%mode force-mono +D -E.

- : force-mono
     (force/verif verif/unit)
     (force/step
        (force/verif verif/unit)
        (step?/halt halt/tt)).

- : force-mono
     (force/verif (verif/and X Y))
     (force/step
        (force/verif (verif/and X Y))
        (step?/halt halt/pair)).

- : force-mono
     (force/verif (verif/or/1 X))
     (force/step
        (force/verif (verif/or/1 X))
        (step?/halt (halt/inl H)))
     <- verif-halt X H.

- : force-mono
     (force/verif (verif/or/2 X))
     (force/step
        (force/verif (verif/or/2 X))
        (step?/halt (halt/inr H)))
     <- verif-halt X H.

- : force-mono
     (force/verif (verif/imp E))
     (force/step
        (force/verif (verif/imp E))
        (step?/halt halt/lam)).

- : force-mono
     (force/step F S)
     (force/step F' S)
     <- force-mono F F'.

%worlds () (force-mono _ _).
%total D (force-mono D _).